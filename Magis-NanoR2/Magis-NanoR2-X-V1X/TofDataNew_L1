[1mdiff --git a/src/main/common/maths.cpp b/src/main/common/maths.cpp[m
[1mindex 384bb66..5b88406 100644[m
[1m--- a/src/main/common/maths.cpp[m
[1m+++ b/src/main/common/maths.cpp[m
[36m@@ -54,7 +54,8 @@[m [mfloat sin_approx(float x)[m
         x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);[m
     float x2 = x * x;[m
     return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));[m
[31m-}[m
[32m+[m[32m}  // AdityaLakshmi // This is done to improve accuracy[m
[32m+[m[32m// https://en.wikipedia.org/wiki/Trigonometric_functions and numerical recipes[m
 [m
 float cos_approx(float x)[m
 {[m
[1mdiff --git a/src/main/flight/altitudehold.cpp b/src/main/flight/altitudehold.cpp[m
[1mindex 362ac65..50c89af 100644[m
[1m--- a/src/main/flight/altitudehold.cpp[m
[1m+++ b/src/main/flight/altitudehold.cpp[m
[36m@@ -629,7 +629,8 @@[m [mvoid apmCalculateEstimatedAltitude(uint32_t currentTime)[m
 #if defined(BARO) && !(defined(LASER_ALT))[m
     checkBaro(); // check if new baro readings have arrived and use them to correct vertical accelerometer offsets.[m
 #else[m
[31m-    checkReading();[m
[32m+[m[32m    //checkReading();[m
[32m+[m[32m    checkLaser();[m
 #endif[m
 [m
     if (accSumCount) {[m
[36m@@ -744,7 +745,7 @@[m [mvoid checkReading()[m
 [m
         tilt = degreesToRadians(calculateTiltAngle(&inclination)/10);[m
         if(tilt < 25)[m
[31m-        ToF_Height *= cos_approx(tilt);[m
[32m+[m[32m        ToF_Height *= cos_approx(tilt); // AdityaLakshmi // warp angles to -pi to pi[m
     }[m
     //Fusion[m
 	if ((ToF_Height > 0 && ToF_Height < 200) && (!isOutofRange())) {[m
[36m@@ -774,7 +775,7 @@[m [mvoid checkReading()[m
 [m
 		tilt = degreesToRadians(calculateTiltAngle(&inclination)/10);[m
 		if(tilt < 25)[m
[31m-		ToF_Height *= cos_approx(tilt);[m
[32m+[m		[32mToF_Height *= cos_approx(tilt); // consider roll and pitch together[m
         }[m
     //Fusion[m
 	if (ToF_Height > 0 && ToF_Height < 350 ) {[m
[36m@@ -794,14 +795,32 @@[m [mvoid checkReading()[m
 	}[m
 [m
 #endif[m
[32m+[m[32m}[m
[32m+[m[32m#endif[m
[32m+[m[32m// AdityaLakshmi[m
[32m+[m[32m// Laser estimate[m
[32m+[m[32m#ifdef LASER_ALTITUDE[m
[32m+[m[32mvoid checkLaser()[m
[32m+[m[32m{[m
[32m+[m	[32m// laser latency correction[m
[32m+[m	[32mfloat tilt = 0;[m
 [m
[32m+[m[32m#ifdef LASER_TOF_L1x[m
[32m+[m[32m    if(isTofDataNew_L1() && (!isOutofRange_L1())) {[m
 [m
[32m+[m		[32mToF_Height = (float)NewSensorRange_L1/10.0f;[m
[32m+[m		[32misTofDataNewflag = false;[m
 [m
[31m-[m
[31m-[m
[32m+[m		[32mtilt = degreesToRadians(calculateTiltAngle(&inclination)/10);[m
[32m+[m		[32m// if(tilt < 25)  // Unsure[m
[32m+[m		[32mToF_Height *= cos_approx(tilt);[m
[32m+[m[32m        }[m
[32m+[m[32m    correctedWithTof(ToF_Height);[m
[32m+[m[32m#endif[m
 }[m
 #endif[m
 [m
[32m+[m
 void checkBaro()[m
 {[m
 [m
[1mdiff --git a/src/main/flight/altitudehold.h b/src/main/flight/altitudehold.h[m
[1mindex 7354544..c2317ea 100644[m
[1m--- a/src/main/flight/altitudehold.h[m
[1m+++ b/src/main/flight/altitudehold.h[m
[36m@@ -56,6 +56,7 @@[m [mvoid AltRst(void);[m
 void correctedWithTof(float ToF_Height);[m
 void correctedWithBaro(float baroAlt, float dt);[m
 void checkReading();[m
[32m+[m[32mvoid checkLaser();[m
 void checkBaro();[m
 [m
 void updateGains();[m
[1mdiff --git a/src/main/target/PRIMUSNANOR2/target.h b/src/main/target/PRIMUSNANOR2/target.h[m
[1mindex 23d87ca..a247264 100644[m
[1m--- a/src/main/target/PRIMUSNANOR2/target.h[m
[1m+++ b/src/main/target/PRIMUSNANOR2/target.h[m
[36m@@ -182,7 +182,7 @@[m [mextern "C" {[m
 //#define LASER_TOF_L0x // only to get laser height for VL53L0x[m
 #define LASER_TOF_L1x // only to get laser height for VL53L1x[m
 #define LASER_ALT // to integrate with althold[m
[31m-[m
[32m+[m[32m#define LASER_ALTITUDE // Only laser based althod[m
 [m
 //#define FLIGHT_STATUS_INDICATOR[m
 #define ENABLE_ACROBAT[m
